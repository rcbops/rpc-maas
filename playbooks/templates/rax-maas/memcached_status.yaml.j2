{% from "templates/common/macros.jinja" import get_metadata with context %}
{% set label = "memcached_status" %}
{% set check_name = label+'--'+inventory_hostname %}
type        : agent.plugin
label       : "{{ check_name }}"
period      : "{{ maas_check_period_override[label] | default(maas_check_period) }}"
timeout     : "{{ maas_check_timeout_override[label] | default(maas_check_timeout) }}"
disabled    : "{{ (check_name is match(maas_excluded_checks_regex)) | ternary('true', 'false') }}"
details     :
    file    : run_plugin_in_venv.sh
    args    : ["{{ maas_plugin_dir }}/memcached_status.py", "{{ container_address | default(internal_api_ip | default(ansible_host)) }}"]
    timeout : {{ (maas_check_timeout_override[label] | default(maas_check_timeout) * 1000) }}
{{ get_metadata(label).strip() }}
{# Add extra metadata options with two leading white spaces #}
alarms      :
    memcache_api_local_status :
        label                   : memcache_api_local_status--{{ inventory_hostname }}
        notification_plan_id    : "{{ maas_notification_plan_override[label] | default(maas_notification_plan) }}"
        disabled                : {{ (('memcache_api_local_status--'+inventory_hostname) is match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (metric["memcache_api_local_status"] != 1) {
                return new AlarmStatus(CRITICAL, "memcache unavailable");
            }
    memcache_curr_connections :
        label                   : memcache_curr_connections--{{ inventory_hostname }}
        notification_plan_id    : "{{ maas_notification_plan_override[label] | default(maas_notification_plan) }}"
        disabled                : {{ (('memcache_curr_connections--'+inventory_hostname) is match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (metric["memcache_curr_connections"] > {{ ((memcached_connections | default(1024) *0.9) | round | int) }}) {
                return new AlarmStatus(CRITICAL, "memcached connection count is >= 90% of max");
            }
            if (metric["memcache_curr_connections"] > {{ ((memcached_connections | default(1024) *0.8) | round | int) }}) {
                return new AlarmStatus(WARNING, "memcached connection count is >= 80% of max");
            }
