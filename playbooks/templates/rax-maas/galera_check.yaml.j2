{% from "templates/common/macros.jinja" import get_metadata with context %}
{% set label = "galera_check" %}
{% set check_name = label+'--'+inventory_hostname %}
type        : agent.plugin
label       : "{{ check_name }}"
period      : "{{ maas_check_period_override[label] | default(maas_check_period) }}"
timeout     : "{{ maas_check_timeout_override[label] | default(maas_check_timeout) }}"
disabled    : "{{ (inventory_hostname != groups['galera_all'][0] or check_name is match(maas_excluded_checks_regex)) | ternary('true', 'false') }}"
details     :
    file    : run_plugin_in_venv.sh
    args    : ["{{ maas_plugin_dir }}/galera_check.py", "-H", "{{ container_address | default(internal_api_ip | default(ansible_host)) }}"]
    timeout : {{ (maas_check_timeout_override[label] | default(maas_check_timeout) * 1000) }}
{{ get_metadata(label).strip() }}
{# Add extra metadata options with two leading white spaces #}
alarms      :
    wsrep_cluster_size :
        label                   : wsrep_cluster_size--{{ inventory_hostname }}
        notification_plan_id    : "{{ maas_notification_plan_override[label] | default(maas_notification_plan) }}"
        disabled                : {{ (('wsrep_cluster_size--'+inventory_hostname) is match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (metric["wsrep_cluster_size"] < {{ groups["galera"] | length }}) {
                return new AlarmStatus(CRITICAL, "Galera cluster size less than expected");
            }
    wsrep_local_state :
        label                   : wsrep_local_state--{{ inventory_hostname }}
        notification_plan_id    : "{{ maas_notification_plan_override[label] | default(maas_notification_plan) }}"
        disabled                : {{ (('wsrep_local_state--'+inventory_hostname) is match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (metric["wsrep_local_state_comment"] != "Synced" ) {
                return new AlarmStatus(CRITICAL, "Galera cluster node not synced");
            }
    percentage_used_mysql_connections :
        label                   : percentage_used_mysql_connections--{{ inventory_hostname }}
        notification_plan_id    : "{{ maas_notification_plan_override[label] | default(maas_notification_plan) }}"
        disabled                : {{ (('percentage_used_mysql_connections--'+inventory_hostname) is match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (percentage(metric["mysql_current_connections"], metric["mysql_max_configured_connections"]) > {{ maas_mysql_connection_critical_threshold }} ) {
                return new AlarmStatus(CRITICAL, "Mysql connectons has exceeded {{ maas_mysql_connection_critical_threshold }}% of configured maximum");
            }
            if (percentage(metric["mysql_current_connections"], metric["mysql_max_configured_connections"]) > {{ maas_mysql_connection_warning_threshold }} ) {
                return new AlarmStatus(WARNING, "Mysql connectons has exceeded {{ maas_mysql_connection_warning_threshold }}% of configured maximum");
            }
    open_file_size_limit_reached :
        label                   : open_file_size_limit_reached--{{ inventory_hostname }}
        notification_plan_id    : "{{ maas_notification_plan_override[label] | default(maas_notification_plan) }}"
        disabled                : {{ (('open_file_size_limit_reached--'+inventory_hostname) is match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (percentage(metric["num_of_open_files"], metric["open_files_limit"]) > {{ maas_mysql_open_files_percentage_critical_threshold }}) {
                return new AlarmStatus(CRITICAL, "Number of open files has exceeded {{ maas_mysql_open_files_percentage_critical_threshold }}% of open file limit");
            }
            if (percentage(metric["num_of_open_files"], metric["open_files_limit"]) > {{ maas_mysql_open_files_percentage_warning_threshold }}) {
                return new AlarmStatus(WARNING, "Number of open files has exceeded {{ maas_mysql_open_files_percentage_warning_threshold }}% of open file limit");
            }
    innodb_row_lock_time_avg :
        label                   : innodb_row_lock_time_avg--{{ inventory_hostname }}
        notification_plan_id    : "{{ maas_notification_plan_override[label] | default(maas_notification_plan) }}"
        disabled                : {{ (('innodb_row_lock_time_avg--'+inventory_hostname) is match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (metric["innodb_row_lock_time_avg"] > {{ maas_innodb_row_lock_time_avg_critical_threshold }}) {
                return new AlarmStatus(CRITICAL, "InnoDB row lock time average has exceeded {{ maas_innodb_row_lock_time_avg_critical_threshold }} milliseconds");
            }
            if (metric["innodb_row_lock_time_avg"] > {{ maas_innodb_row_lock_time_avg_warning_threshold }}) {
                return new AlarmStatus(WARNING, "InnoDB row lock time average has exceeded {{ maas_innodb_row_lock_time_avg_warning_threshold }} milliseconds");
            }
    innodb_deadlocks :
        label                   : innodb_deadlocks--{{ inventory_hostname }}
        notification_plan_id    : "{{ maas_notification_plan_override[label] | default(maas_notification_plan) }}"
        disabled                : {{ (('innodb_deadlocks--'+inventory_hostname) is match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (rate(metric["innodb_deadlocks"]) > {{ maas_innodb_deadlocks_rate_warning_threshold }}) {
                return new AlarmStatus(WARNING, "InnoDB has experienced a deadlock rate greater than {{ maas_innodb_deadlocks_rate_warning_threshold }} per {{ maas_check_period }} seconds");
            }
            if (rate(metric["innodb_deadlocks"]) > {{ maas_innodb_deadlocks_rate_critical_threshold }}) {
                return new AlarmStatus(CRITICAL, "InnoDB has experienced a deadlock rate greater than {{ maas_innodb_deadlocks_rate_critical_threshold }} per {{ maas_check_period }} seconds");
            }
    access_denied_errors :
        label                   : access_denied_errors--{{ inventory_hostname }}
        notification_plan_id    : "{{ maas_notification_plan_override[label] | default(maas_notification_plan) }}"
        disabled                : {{ (('access_denied_errors--'+inventory_hostname) is match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (rate(metric["access_denied_errors"]) > {{ maas_mysql_access_denied_errors_rate_warning_threshold }}) {
                return new AlarmStatus(WARNING, "Access denied errors rate is greater than {{ maas_mysql_access_denied_errors_rate_warning_threshold }} per {{ (maas_check_period_override[label] | default(maas_check_period)) }} seconds");
            }
            if (rate(metric["access_denied_errors"]) > {{ maas_mysql_access_denied_errors_rate_critical_threshold }}) {
                return new AlarmStatus(CRITICAL, "Access denied errors rate is greater than {{ maas_mysql_access_denied_errors_rate_critical_threshold }} per {{ (maas_check_period_override[label] | default(maas_check_period)) }} seconds");
            }
    aborted_connects :
        label                   : aborted_connects--{{ inventory_hostname }}
        notification_plan_id    : "{{ maas_notification_plan_override[label] | default(maas_notification_plan) }}"
        disabled                : {{ (('aborted_connects--'+inventory_hostname) is match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (rate(metric["aborted_connects"]) > {{ maas_mysql_aborted_connects_rate_warning_threshold }}) {
                return new AlarmStatus(WARNING, "Aborted connects rate is greater than {{ maas_mysql_aborted_connects_rate_warning_threshold }} per {{ (maas_check_period_override[label] | default(maas_check_period)) }} seconds");
            }
            if (rate(metric["aborted_connects"]) > {{ maas_mysql_aborted_connects_rate_critical_threshold }}) {
                return new AlarmStatus(CRITICAL, "Aborted connects rate is greater than {{ maas_mysql_aborted_connects_rate_critical_threshold }} per {{ (maas_check_period_override[label] | default(maas_check_period)) }} seconds");
            }
