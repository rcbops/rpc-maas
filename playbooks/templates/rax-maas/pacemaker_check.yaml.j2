{% from "templates/common/macros.jinja" import get_metadata with context %}
{% set label = "pacemaker" %}
{% set check_name = label+'--'+inventory_hostname %}
type: agent.plugin
label       : "{{ check_name }}"
period      : "{{ maas_check_period_override[label] | default(maas_check_period) }}"
timeout     : "{{ maas_check_timeout_override[label] | default(maas_check_timeout) }}"
disabled    : "{{ (inventory_hostname != groups['shared-infra_hosts'][0] or check_name is match(maas_excluded_checks_regex)) | ternary('true', 'false') }}"
details     :
    file    : run_plugin_in_venv.sh
    args    : ["{{ maas_plugin_dir }}/pacemaker.py"]
    timeout : {{ (maas_check_timeout_override[label] | default(maas_check_timeout) * 1000) }}
{{ get_metadata(label).strip() }}
{# Add extra metadata options with two leading white spaces #}
alarms      :
    pacemaker_failed_actions:
        label                   : pacemaker_failed_actions--{{ inventory_hostname }}
        notification_plan_id    : "{{ maas_notification_plan_override[label] | default(maas_notification_plan) }}"
        disabled                : {{ (('pacemaker_failed_actions--'+inventory_hostname) is match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (metric["pacemaker_failed_actions"] regex ".*Errors in pacemaker cluster.*") {
                return new AlarmStatus(CRITICAL, "Pacemaker has failed actions");
            }

    pacemaker_nodes_offline_standby:
        label                   : pacemaker_offline_standby--{{ inventory_hostname }}
        notification_plan_id    : "{{ maas_notification_plan_override[label] | default(maas_notification_plan) }}"
        disabled                : {{ (('pacemaker_offline_standby--'+inventory_hostname) is match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (metric["pacemaker_status_nodes"] regex ".*Pacemaker node standby/offline.*") {
                return new AlarmStatus(CRITICAL, "Pacemaker has standby/offline nodes");
            }

    pacemaker_resource_stop:
        label                   : pacemaker_resource_stop--{{ inventory_hostname }}
        notification_plan_id    : "{{ maas_notification_plan_override[label] | default(maas_notification_plan) }}"
        disabled                : {{ (('pacemaker_resource_stop--'+inventory_hostname) is match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (metric["pacemaker_resource_stop"] regex ".*Stopped resource.*") {
                return new AlarmStatus(CRITICAL, "Pacemaker has stopped resources");
            }
