[global_tags]
{% if 'all_containers' in groups and inventory_hostname in groups['all_containers'] | default([]) %}
  node_type = "container"
{% else %}
  node_type = "physical_host"
{% endif %}
  job_reference = "{{ maas_job_reference }}"

{%   set telegraf_commands = [] %}
{%   set _ = telegraf_commands.extend(telegraf_maas_commands) %}

{% set interval = (telegraf_interval | int) | round %}
{#
Each collection can take input_command_timeout seconds, and
could be started at last after collection_jitter seconds.
Taking 2 more seconds for safety, and we should have the time it
takes to get metrics, worst case scenario.
#}
{% set c_jitter = collection_jitter | default(8) %}
{% set input_timeout = input_command_timeout | default(5) %}
{% set f_interval = (interval + (c_jitter + input_timeout)) | int | round + 2 %}

[agent]
  interval = "{{ interval | round }}s"
  round_interval = false
  metric_batch_size = 2048
  metric_buffer_limit = 20480
  collection_jitter = "{{ c_jitter }}s"
  flush_interval = "{{ f_interval }}s"
  flush_jitter = "8s"
  debug = false
  quiet = true
  hostname = "{{ inventory_hostname }}"
  omit_hostname = false

{%   set influx_targets = [] %}
{%   for item in groups['influx_hosts'] | default([]) %}
{%     set target = influxdb_protocol + '://' + hostvars[item]['ansible_host'] | default(hostvars[item]['ansible_ssh_host']) + ':' + influxdb_port | string %}
{%     set _ = influx_targets.extend([target]) %}
{%   endfor %}
{%   set all_influx_targets = influx_telegraf_targets | union(influx_targets) %}

[[outputs.influxdb]]
  urls = [{% for item in all_influx_targets %}"{{ item }}"{% if not loop.last %}, {% endif %}{% endfor %}]
  database = "{{ influxdb_db_name }}"
  precision = "s"
  write_consistency = "any"
  timeout = "30s"

{% if telegraf_outputs_prometheus_client | bool %}
[[outputs.prometheus_client]]
  listen = ":{{ telegraf_outputs_prometheus_client_listen }}"
  expiration_interval = "{{ telegraf_outputs_prometheus_client_expiration_interval }}s"
{% endif %}

[[inputs.processes]]

[[inputs.system]]

[[inputs.conntrack]]
  files = ["ip_conntrack_count","ip_conntrack_max",
            "nf_conntrack_count","nf_conntrack_max"]
  dirs = ["/proc/sys/net/ipv4/netfilter","/proc/sys/net/netfilter"]

{% if 'swift_proxy' in groups and inventory_hostname in groups['swift_proxy'] %}
[[inputs.statsd]]
  service_address = ":8125"
  metric_separator = "."
  templates = [
    "*.swift.proxy-server.*.*.*.* host.measurement.measurement.measurement.method.returncode.field*",
    "*.swift.proxy-server.*.policy.*.*.*.* host.measurement.measurement.measurement.measurement.measurement.method.returncode.field*",
  ]
{% endif %}

{% for command in telegraf_commands %}
[[inputs.exec]]
  commands = ["{{ command }}"]
  timeout = "{{ input_timeout }}s"
  data_format = "influx"
{% endfor %}

{% if 'all_containers' in groups and inventory_hostname in groups['all_containers'] | default([]) %}
[[inputs.net]]

{% else %}
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  fielddrop = ["time_*"]

[[inputs.net]]

[[inputs.netstat]]

[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs"]

[[inputs.diskio]]

[[inputs.kernel]]

[[inputs.mem]]

[[inputs.swap]]

{% endif %}
